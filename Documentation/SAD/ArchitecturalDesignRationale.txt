2.4 ARCHITECTURAL DESIGN RATIONALE
Key design decisions include:
•	Three-Layer Architecture:
Chosen for its clear separation of concerns, ease of testing, and future scalability.
•	Modularity:
Inspired by AquaLush, the design anticipates potential evolution toward microservices or CQRS if needed.
•	Security and Performance:
Utilizes Auth0 authentication, EF Core caching, and asynchronous operations to ensure high performance and security.
•	Flexibility:
The use of Repository and Unit of Work patterns enables isolated changes without impacting business logic.
2.4.1 Technical Constraints
●	.NET 6+ framework
●	Entity Framework Core for ORM
●	SQL Server database
●	RESTful API design
●	JWT authentication

2.4.2 Quality Requirements
Performance
   - Response time < 50ms for standard operations
   - Support for pagination and lazy loading
Security
   - JWT-based authentication using Auth0
   - Role-based authorization
   - Input validation
Maintainability
   - Modular design
   - Clear separation of concerns
   - Consistent coding standards
   - Comprehensive documentation
Scalability
   - Horizontal scaling capability
   - Caching support(for future implementation)
   - Async operations

2.4.3 Scalability Considerations
Current Architecture Adequacy:
- The three-layer architecture effectively serves the current feature set
- Suitable for the existing user base and performance requirements
- Maintains good separation of concerns

Future Scaling Considerations:
- Migration to microservices if specific components need independent scaling
- Implementation of CQRS pattern for complex read/write operations
- Event-driven architecture for better decoupling
- Domain-driven design for complex domain logic

2.4.4  Performance Considerations
Caching Strategy
●	Implementation of response caching
●	Entity Framework second-level cache
●	Distributed caching support (Redis recommended for future scaling)
Optimization Techniques
●	Async/await patterns
●	Efficient querying with proper indexing
●	Pagination implementation
●	Resource compression
●	Query optimization and monitoring

Scaling Strategies
Current Implementation:
●	Vertical scaling capabilities
●	Basic caching mechanisms
●	Connection pooling

Future Considerations:
●	Horizontal scaling preparation
●	Load balancing implementation
●	Database sharding strategy
●	Message queue integration for async operations

2.5.	Mid-Level Design Patterns
Design patterns guide how components interact and help maintain a clear separation of concerns. For our project, we have implemented the Repository and Unit of Work patterns to organize data access and transactional operations
2.5.1 Repository Pattern
The Repository Pattern abstracts the data access logic from the business logic, enabling easier testing, maintenance, and flexibility. It provides a centralized interface for performing CRUD operations on entities. Below is an example implementation for handling book ratings:

```BookRatingRepository.cs

public class BookRatingRepository<TEntity> : IBookRatingRepository<TEntity> where TEntity : class
{
    private readonly ApplicationDbContext _context;
    public BookRatingRepository(ApplicationDbContext context)
    {
        _context = context;
    }
     public void Create(Tentity entity)
        {
            _dbContext.Set<Tentity>().Add(entity);
        }
    // the rest of the implementation
}
```
Explanation:
This repository encapsulates all operations related to book ratings, such as querying, inserting, and updating data. By abstracting these operations behind an interface, the business logic remains decoupled from the underlying database technology.
2.5.2 Unit of Work Pattern
The Unit of Work Pattern coordinates the work of multiple repositories by managing transactions and ensuring consistency across operations. The following code snippet demonstrates an example of a Unit of Work implementation:
```UnitOfWork.cs

public class UnitOfWork : IUnitOfWork
{
    private readonly ApplicationDbContext _context;
    private Hashtable _repositories;
    
    // Implementation
}
```
Explanation:
The Unit of Work pattern aggregates changes across different repositories and commits them as a single transaction. This approach minimizes data inconsistency and simplifies error handling during concurrent data operations.

2.6.	Database Architecture
A robust database architecture is essential for ensuring data integrity, performance, and maintainability. Our design decisions and entity relationships are captured in the following sections.
2.6.1 Entity Relationship Diagram
Figure 2-4 Entity Relationship Diagram 
The ERD visually represents the relationships between entities such as Users, Books, Ratings, and Wishlists. It helps stakeholders understand how data is interconnected and informs database design decisions.
2.6.2 Database Design Decisions
Our database design incorporates several key decisions to support system requirements:
1.	Use of soft deletes where appropriate
2.	Audit trails through BaseEntity
3.	Proper indexing strategy
4.	Relationship constraints
These decisions help balance performance with data integrity, ensuring that the system can scale and maintain reliable operations over time
2.7.	 Security Architecture
2.7.1 Authentication
Our application uses Auth0 as the identity provider and authenticates users through JWT (JSON Web Tokens). The tokens are issued by Auth0 and securely transmitted between the client and server. These tokens allow for stateless authentication, removing the need for session storage on the server.
We configure JWT authentication in Program.cs using the AddAuthentication and AddJwtBearer middleware. Here's a sample configuration:
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
.AddJwtBearer(options =>
{
    options.Authority = $"https://{builder.Configuration["Auth0:Domain"]}/";
    options.Audience = builder.Configuration["Auth0:Audience"];
    options.TokenValidationParameters = new TokenValidationParameters
    {
        NameClaimType = ClaimTypes.NameIdentifier
    };
